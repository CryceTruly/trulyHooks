{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","index","completeTodo","deleteTodo","react_default","a","createElement","style","textDecoration","isCompleted","className","text","onClick","TodoForm","_ref2","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","type","onChange","target","placeholder","App","_useState3","_useState4","todos","setTodos","newTodos","toConsumableArray","splice","map","key","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAKA,SAASA,EAATC,GAAmD,IAApCC,EAAoCD,EAApCC,KAAKC,EAA+BF,EAA/BE,MAAMC,EAAyBH,EAAzBG,aAAaC,EAAYJ,EAAZI,WACrC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,eAAeR,EAAKS,YAAY,eAAe,IAAKC,UAAU,QACxEV,EAAKW,KACNP,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIV,EAAaD,KAAlC,YACAG,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIT,EAAWF,KAAhC,OAOA,SAASY,EAATC,GAA4B,IAATC,EAASD,EAATC,QAASC,EACHC,mBAAS,IADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACbI,EADaJ,EAAA,GAW1B,OACEd,EAAAC,EAAAC,cAAA,QAAMiB,SAVW,SAACC,GACdA,EAAEC,iBACEJ,IAGJN,EAAQM,GACRC,EAAS,OAKblB,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,OAAOhB,UAAU,QAAQW,MAAOA,EAAOM,SAAU,SAAAH,GAAC,OAAEF,EAASE,EAAEI,OAAOP,QAAQQ,YAAY,iBAoD3FC,MA3Cf,WAAe,IAAAC,EACUd,mBAAS,CAC9B,CAACN,KAAK,cAAcF,aAAY,GAChC,CAACE,KAAK,eAAeF,aAAY,GACjC,CAACE,KAAK,cAAcF,aAAY,GAChC,CAACE,KAAK,YAAYF,aAAY,GAC9B,CAACE,KAAK,gBAAgBF,aAAY,KANvBuB,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GACNE,EADMD,EAAA,GACAE,EADAF,EAAA,GAaP9B,EAAa,SAAAD,GACjB,IAAMkC,EAAShB,OAAAiB,EAAA,EAAAjB,CAAIc,GACnBE,EAASlC,GAAOQ,aAAY,EAE5ByB,EAASC,IAGLhC,EAAW,SAAAF,GACf,IAAMkC,EAAShB,OAAAiB,EAAA,EAAAjB,CAAIc,GACnBE,EAASE,OAAOpC,EAAM,GACtBiC,EAASC,IAEX,OACE/B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aAEZuB,EAAMK,IAAI,SAACtC,EAAKC,GAAN,OACTG,EAAAC,EAAAC,cAACR,EAAD,CAAMyC,IAAKtC,EAAOD,KAAMA,EAAMC,MAAOA,EAAOC,aAAcA,EAAcC,WAAYA,MAGtFC,EAAAC,EAAAC,cAACO,EAAD,CAAUE,QAzBF,SAACJ,GACb,IAAMwB,EAAQ,GAAAK,OAAArB,OAAAiB,EAAA,EAAAjB,CAAKc,GAAL,CAAW,CAACtB,UAC1BuB,EAASC,SCtCOM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7cc14d72.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\n\n\n\nfunction Todo({todo,index,completeTodo,deleteTodo}){\n  return (\n    <div style={{textDecoration:todo.isCompleted?'line-through':''}} className=\"todo\">\n      {todo.text}\n      <div>\n<button onClick={()=>completeTodo(index)}>Complete</button>\n<button onClick={()=>deleteTodo(index)}>x</button>\n      </div>\n    </div>\n  )\n}\n\n\nfunction TodoForm({addTodo}){\n  const [value,setValue]=useState('');\n  const handleSubmit=(e)=>{\n        e.preventDefault();\n        if(!value){\n            return ;\n        }\n        addTodo(value);\n        setValue('')\n\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n    <input type=\"text\" className=\"input\" value={value} onChange={e=>setValue(e.target.value)} placeholder=\"Add Item...\"/>\n    </form>\n  )\n}\n\n\n\n\n\nfunction App() {\n  const [todos,setTodos]=useState([\n    {text:'Learn Hooks',isCompleted:false},\n    {text:'Meet Friend ',isCompleted:false},\n    {text:'Go shopping',isCompleted:false},\n    {text:'Buy House',isCompleted:false},\n    {text:'Learn Hooks 3',isCompleted:false}\n  ]);\n  const addTodo=(text)=>{\n    const newTodos=[...todos,{text}];\n    setTodos(newTodos);\n  }\n\n  const completeTodo=index=>{\n    const newTodos=[...todos];\n    newTodos[index].isCompleted=true;\n\n    setTodos(newTodos);\n\n  }\n  const deleteTodo=index=>{\n    const newTodos=[...todos];\n    newTodos.splice(index,1);\n    setTodos(newTodos);\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n\n        {todos.map((todo,index)=>(\n          <Todo key={index} todo={todo} index={index} completeTodo={completeTodo} deleteTodo={deleteTodo}></Todo>\n        ))}\n\n        <TodoForm addTodo={addTodo}/>\n\n\n      </div>\n    </div>\n\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}